{"version":3,"sources":["components/grouplist/groupitem/index.js","components/grouplist/index.js","components/tasklist/taskitem/index.js","components/tasklist/index.js","common/serviceWorker/index.js","index.js","TodoListApp/index.js"],"names":["GroupItem","props","text","tasks","onClick","length","GroupList","title","description","groups","setGroups","setSelectedGroup","React","useState","inputValue","setInputValue","onSubmit","e","preventDefault","group","type","onChange","target","value","map","i","key","TaskItem","done","toggleDone","TaskList","selectedGroup","task","defaultProps","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","fetch","then","response","contentType","headers","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","ServiceWorker"],"mappings":"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","file":"static/js/main.f1c49584.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function GroupItem(props) {\n    const {text, tasks, onClick} = props;\n\n    return (\n        <section onClick={onClick}>{text} {tasks.length}</section>\n    );\n}","import React from 'react';\nimport GroupItem from \"./groupitem\";\n\nexport default function GroupList(props) {\n    const {title, description, groups, setGroups, setSelectedGroup} = props;\n    const [inputValue, setInputValue] = React.useState(\"\");\n\n    const renderGroups = () => {\n        return groups.map((group, i) => {\n            return <GroupItem key={i} {...group}\n                onClick={() => {setSelectedGroup(i)}}\n            />;\n        });\n    };\n\n    const handleInput = (e) => {\n        e.preventDefault();\n        setInputValue(e.target.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const group = {\n            text: inputValue,\n            tasks: []\n        };\n        setGroups([...groups, group]);\n        setSelectedGroup(groups.length);\n        setInputValue(\"\");\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <h1>{title}</h1>\n            <p>{description}</p>\n            <input type=\"text\" onChange={handleInput} value={inputValue}/>\n            <section>{renderGroups()}</section>\n        </form>\n    );\n}\n\nGroupList.defaultProps = {\n    groups: []\n};","import React from 'react';\n\nexport default function TaskItem(props) {\n    const {text, done, toggleDone} = props;\n\n    return (\n        <section onClick={toggleDone}>{text} {done ? \"done\" : \"not done\"}</section>\n    );\n}","import React from 'react';\nimport TaskItem from \"./taskitem\";\n\nexport default function TaskList(props) {\n    const {groups, selectedGroup, setGroups} = props;\n    const [inputValue, setInputValue] = React.useState(\"\");\n\n    const renderTasks = () => {\n        if (selectedGroup !== null) {\n            const tasks = groups[selectedGroup].tasks;\n            return tasks.map((task, i) => {\n                return <TaskItem\n                    key={i}\n                    {...task}\n                    toggleDone={() => {\n                        groups[selectedGroup].tasks[i].done = !task.done;\n                        setGroups([...groups]);\n                    }}\n                />;\n            });\n        }\n        return <p>No group selected</p>\n    };\n\n    const handleInput = (e) => {\n        e.preventDefault();\n        setInputValue(e.target.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const task = {\n            text: inputValue,\n            done: false\n        };\n        const tasks = groups[selectedGroup].tasks;\n        groups[selectedGroup].tasks = [...tasks, task];\n        setGroups([...groups]);\n        setInputValue(\"\");\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            {selectedGroup !== null ? <input type=\"text\" onChange={handleInput} value={inputValue}/> : null }\n            <section>{renderTasks()}</section>\n        </form>\n    );\n}\n\nTaskList.defaultProps = {\n    tasks: []\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TodoListApp from './TodoListApp';\nimport {\n    ServiceWorker\n} from './common';\n\nReactDOM.render(\n    <TodoListApp />,\n    document.getElementById('root')\n);\n\nServiceWorker.register();\n","import React from 'react';\nimport './_styles/styles.scss';\nimport {\n    GroupList, TaskList\n} from \"../components\";\n\nexport default function TodoListApp() {\n    const [groups, setGroups] = React.useState([]);\n    const [selectedGroup, setSelectedGroup] = React.useState(null);\n\n    return (\n        <main>\n            <GroupList\n                title=\"Todo List\"\n                description=\"Add a group to start planning your tasks\"\n                groups={groups}\n                setGroups={setGroups}\n                setSelectedGroup={setSelectedGroup}\n            />\n            <TaskList\n                groups={groups}\n                selectedGroup={selectedGroup}\n                setGroups={setGroups}\n            />\n        </main>\n    );\n}"],"sourceRoot":""}