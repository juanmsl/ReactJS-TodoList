{"version":3,"sources":["components/grouplist/groupitem/index.js","components/grouplist/index.js","components/tasklist/taskitem/index.js","components/tasklist/index.js","common/serviceWorker/index.js","index.js","modules/index.js"],"names":["GroupItem","props","text","tasks","onClick","selected","className","length","GroupList","title","description","groups","setGroups","selectedGroup","setSelectedGroup","React","useState","inputValue","setInputValue","disableAddButton","isDisableAddButton","disableDeleteAllButton","isDisableDeleteAllButton","handleSubmit","e","preventDefault","group","onSubmit","type","onChange","target","value","disabled","map","i","key","TaskItem","done","toggleDone","TaskList","task","defaultProps","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","fetch","then","response","contentType","headers","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","ServiceWorker"],"mappings":"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","file":"static/js/main.8c1f9de2.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function GroupItem(props) {\n    const {text, tasks, onClick, selected} = props;\n\n    return (\n        <section onClick={onClick} className={`group-list__item ${selected ? \"selected\" : \"\"}`}>\n            <span>{text}</span>\n            <span>{tasks.length}</span>\n        </section>\n    );\n}","import React from 'react';\nimport GroupItem from \"./groupitem\";\n\nexport default function GroupList(props) {\n    const {title, description, groups, setGroups, selectedGroup, setSelectedGroup} = props;\n    const [inputValue, setInputValue] = React.useState(\"\");\n\n    const [disableAddButton, isDisableAddButton] = [inputValue ? \"\" : \"disabled\", !inputValue];\n    const [disableDeleteAllButton, isDisableDeleteAllButton] = [groups.length ? \"\" : \"disabled\", !groups.length];\n\n    const renderGroups = () => {\n        return groups.map((group, i) => (\n            <GroupItem\n                key={i}\n                onClick={() => {\n                    setSelectedGroup(i)\n                }}\n                selected={selectedGroup === i}\n                {...group}\n            />\n        ));\n    };\n\n    const handleInput = (e) => {\n        e.preventDefault();\n        setInputValue(e.target.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (!inputValue) return;\n        const group = {\n            text: inputValue,\n            tasks: []\n        };\n        setGroups([...groups, group]);\n        setSelectedGroup(groups.length);\n        setInputValue(\"\");\n    };\n\n    const deleteAll = (e) => {\n        e.preventDefault();\n        setGroups([]);\n        setSelectedGroup(null);\n        setInputValue(\"\");\n    };\n\n    return (\n        <form onSubmit={handleSubmit} className=\"group-list\">\n            <section>\n                <h1 className=\"main-title\">{title}</h1>\n                <p className=\"description\">{description}</p>\n                <input type=\"text\" onChange={handleInput} value={inputValue} className=\"input\"/>\n                <section className=\"group-list__buttons\">\n                    <button onClick={handleSubmit} className={`button ${disableAddButton}`} disabled={isDisableAddButton}>Add</button>\n                    <button onClick={deleteAll} className={`button danger ${disableDeleteAllButton}`} disabled={isDisableDeleteAllButton}>Delete all</button>\n                </section>\n            </section>\n            <section className=\"group-list__items\">{renderGroups()}</section>\n        </form>\n    );\n}\n\nGroupList.defaultProps = {\n    groups: []\n};","import React from 'react';\n\nexport default function TaskItem(props) {\n    const {text, done, toggleDone} = props;\n\n    return (\n        <section onClick={toggleDone} className={`task-list__item ${done ? \"done\" : \"\"}`}>\n            {text}\n        </section>\n    );\n}","import React from 'react';\nimport TaskItem from \"./taskitem\";\n\nexport default function TaskList(props) {\n    const {groups, selectedGroup, setGroups} = props;\n    const [inputValue, setInputValue] = React.useState(\"\");\n\n    const renderTasks = () => {\n        if (selectedGroup !== null) {\n            const tasks = groups[selectedGroup].tasks;\n            return tasks.map((task, i) => {\n                return <TaskItem\n                    key={i}\n                    {...task}\n                    toggleDone={() => {\n                        groups[selectedGroup].tasks[i].done = !task.done;\n                        setGroups([...groups]);\n                    }}\n                />;\n            });\n        }\n        return <p>No project selected</p>\n    };\n\n    const handleInput = (e) => {\n        e.preventDefault();\n        setInputValue(e.target.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (!inputValue) return;\n        const task = {\n            text: inputValue,\n            done: false\n        };\n        const tasks = groups[selectedGroup].tasks;\n        groups[selectedGroup].tasks = [...tasks, task];\n        setGroups([...groups]);\n        setInputValue(\"\");\n    };\n\n    const deleteAll = (e) => {\n        e.preventDefault();\n        groups[selectedGroup].tasks = [];\n        setGroups([...groups]);\n        setInputValue(\"\");\n    };\n\n    return (\n        <form onSubmit={handleSubmit} className=\"task-list\">\n            <section>\n                {selectedGroup !== null ? <h2>{groups[selectedGroup].text}</h2> : null }\n                {selectedGroup !== null ? (\n                    <section className=\"task-list__buttons\">\n                        <input type=\"text\" onChange={handleInput} value={inputValue} className=\"input\"/>\n                        <button onClick={handleSubmit} className={`button`}>Add</button>\n                        <button onClick={deleteAll} className={`button danger`}>Delete all</button>\n                    </section>\n                    ) : null }\n            </section>\n            <section className=\"task-list__items\">{renderTasks()}</section>\n        </form>\n    );\n}\n\nTaskList.defaultProps = {\n    tasks: []\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TodoListApp from \"modules\";\nimport {\n    ServiceWorker\n} from 'common';\n\nReactDOM.render(\n    <TodoListApp />,\n    document.getElementById('root')\n);\n\nServiceWorker.register();\n","import React from 'react';\nimport 'scss/styles.scss';\nimport {\n    GroupList, TaskList\n} from \"components\";\n\nexport default function TodoListApp() {\n    const [groups, setGroups] = React.useState([]);\n    const [selectedGroup, setSelectedGroup] = React.useState(null);\n\n    return (\n        <main className=\"todolist-app\">\n            <GroupList\n                title=\"Todo List\"\n                description=\"In this list you can add a project to start planning your tasks about it\"\n                groups={groups}\n                setGroups={setGroups}\n                selectedGroup={selectedGroup}\n                setSelectedGroup={setSelectedGroup}\n            />\n            <TaskList\n                groups={groups}\n                selectedGroup={selectedGroup}\n                setGroups={setGroups}\n            />\n        </main>\n    );\n}"],"sourceRoot":""}